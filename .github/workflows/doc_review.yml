name: AI Doc Review

on:
  workflow_dispatch:

  issue_comment:
    types:
      - created

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'issue_comment' &&
        contains(github.event.comment.body, '/bot-review') &&
        contains('hfxsd,likidu,lilin90,Oreoxmt,qiancai', github.event.comment.user.login)
      )
    outputs:
      zh_files_count: ${{ steps.diff.outputs.zh_files_count }}
      en_files_count: ${{ steps.diff.outputs.en_files_count }}
      review_mode: ${{ steps.extract.outputs.REVIEW_MODE }}
      commit_sha: ${{ steps.extract.outputs.COMMIT_SHA }}
      base_sha: ${{ steps.extract.outputs.BASE_SHA }}
      head_sha: ${{ steps.extract.outputs.HEAD_SHA }}
    steps:
      - name: Debug Info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event type: ${{ github.event.action }}"
          echo "Comment body: ${{ github.event.comment.body || 'No comment body' }}"
          echo "Comment author: ${{ github.event.comment.user.login || 'No user' }}"

      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Setup GitHub CLI
        run: |
          # Check if GitHub CLI is installed
          if ! command -v gh &> /dev/null; then
            echo "GitHub CLI not found, installing..."
            # Install GitHub CLI (should be available on GitHub-hosted runners, but adding for completeness)
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi
          # Verify GitHub CLI installation
          gh --version
          # Ensure auth is properly set
          echo "Using GITHUB_TOKEN for authentication"

      - name: Extract review parameters
        id: extract
        if: github.event_name == 'issue_comment'
        run: |
          COMMENT="${{ github.event.comment.body }}"
          echo "Raw comment: $COMMENT"

          # Match commit range
          if [[ "$COMMENT" =~ \/bot-review:[[:space:]]*([a-f0-9]{7,40})[[:space:]]*\.\.[[:space:]]*([a-f0-9]{7,40}) ]]; then
            echo "BASE_SHA=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "HEAD_SHA=${BASH_REMATCH[2]}" >> $GITHUB_OUTPUT
            echo "REVIEW_MODE=commit_range" >> $GITHUB_OUTPUT
            echo "Detected commit range with regex: ${BASH_REMATCH[1]}..${BASH_REMATCH[2]}"

          # Match a single commit
          elif [[ "$COMMENT" =~ \/bot-review:[[:space:]]+([a-f0-9]{7,40}) ]]; then
            echo "COMMIT_SHA=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "REVIEW_MODE=single_commit" >> $GITHUB_OUTPUT
            echo "Detected single commit: ${BASH_REMATCH[1]}"

          # Match "/bot-review" or "/bot-review "
          elif [[ "$COMMENT" =~ ^\/bot-review[[:space:]]*$ ]]; then
            echo "REVIEW_MODE=latest" >> $GITHUB_OUTPUT
            echo "Detected default review mode"

          # Invalid format
          else
            echo "REVIEW_MODE=invalid" >> $GITHUB_OUTPUT
            echo "Invalid bot-review command format"
          fi

          echo "Parameters output:"
          cat $GITHUB_OUTPUT

      - name: Get PR diff
        id: diff
        run: |
          echo "Getting PR diff to check file paths..."
          
          # Try to get PR number - first from pull_request event, then from issue
          PR_NUMBER=""
          if [[ -f "$GITHUB_EVENT_PATH" ]]; then
            PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH" 2>/dev/null || echo "")
            if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
              PR_NUMBER=$(jq --raw-output .issue.number "$GITHUB_EVENT_PATH" 2>/dev/null || echo "")
            fi
          fi
          
          if [[ -n "$PR_NUMBER" && "$PR_NUMBER" != "null" ]]; then
            echo "PR number found: $PR_NUMBER"
            
            # Make sure gh CLI is installed and authenticated
            echo "Using GitHub CLI to get changed files..."
            
            # Get the list of changed files
            FILES=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} --json files --jq '.files[].path')
            
            # Count files in zh/ and en/ directories
            ZH_COUNT=$(echo "$FILES" | grep -c "^zh/" || echo "0")
            EN_COUNT=$(echo "$FILES" | grep -c "^en/" || echo "0")
            
            echo "Changed files in PR #$PR_NUMBER:"
            echo "Files in zh/: $ZH_COUNT"
            echo "Files in en/: $EN_COUNT"
            
            echo "zh_files_count=$ZH_COUNT" >> $GITHUB_OUTPUT
            echo "en_files_count=$EN_COUNT" >> $GITHUB_OUTPUT
          else
            echo "Could not determine PR number, setting defaults"
            echo "zh_files_count=0" >> $GITHUB_OUTPUT
            echo "en_files_count=0" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Upload repository as an artifact to be used by downstream jobs
      - name: Upload Repository
        uses: actions/upload-artifact@v3
        with:
          name: repository
          path: .
          retention-days: 1

  review-zh:
    needs: prepare
    if: needs.prepare.outputs.zh_files_count > 0
    runs-on: ubuntu-latest
    steps:
      # Download repository from artifact instead of checking out again
      - name: Download Repository
        uses: actions/download-artifact@v3
        with:
          name: repository
          path: .
      
      # Set Git directory to usable state
      - name: Setup Git
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: AI Doc Reviewer for Chinese docs
        uses: qiancai/ai-codereviewer@test-gpt
        continue-on-error: false
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          API_PROVIDER: "deepseek"
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          DEEPSEEK_API_MODEL: "deepseek-chat"
          exclude: "**/*.json,en/**"  # Exclude JSON files and English docs
          REVIEW_MODE: ${{ needs.prepare.outputs.review_mode || 'default' }}
          COMMIT_SHA: ${{ needs.prepare.outputs.commit_sha || '' }}
          BASE_SHA: ${{ needs.prepare.outputs.base_sha || '' }}
          HEAD_SHA: ${{ needs.prepare.outputs.head_sha || '' }}
          PROMPT_PATH: "doc-review-prompt-zh.txt"

  review-en:
    needs: prepare
    if: needs.prepare.outputs.en_files_count > 0
    runs-on: ubuntu-latest
    steps:
      # Download repository from artifact instead of checking out again
      - name: Download Repository
        uses: actions/download-artifact@v3
        with:
          name: repository
          path: .
      
      # Set Git directory to usable state
      - name: Setup Git
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: AI Doc Reviewer for English docs
        uses: qiancai/ai-codereviewer@main
        continue-on-error: false
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          API_PROVIDER: "openai"
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: "gpt-4"
          exclude: "**/*.json,zh/**"  # Exclude JSON files and Chinese docs
          REVIEW_MODE: ${{ needs.prepare.outputs.review_mode || 'default' }}
          COMMIT_SHA: ${{ needs.prepare.outputs.commit_sha || '' }}
          BASE_SHA: ${{ needs.prepare.outputs.base_sha || '' }}
          HEAD_SHA: ${{ needs.prepare.outputs.head_sha || '' }}
          PROMPT_PATH: "doc-review-prompt-en.txt"
